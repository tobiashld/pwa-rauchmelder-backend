generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model auftraggeber {
  id         Int       @unique(map: "auftraggeber_un") @default(autoincrement())
  name       String    @db.VarChar(50)
  strasse     String    @map("straße") @db.VarChar(50)
  hausnummer Int
  plz        String    @db.VarChar(5)
  ort        String    @db.VarChar(50)
  telefon    String    @db.VarChar(20)
  email      String    @db.VarChar(50)
  objekte    objekte[]
}

model chats {
  id             String           @id(map: "chats_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatteilnehmer chatteilnehmer[]
  nachrichten    nachrichten[]
}

model chatteilnehmer {
  chatid String @db.Uuid
  userid String @db.Uuid
  id     String @id(map: "chatteilnehmer_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user  users  @relation(fields: [userid], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "chatteilnehmer_fk")
  chat  chats  @relation(fields: [chatid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatteilnehmer_fk_1")
}

model nachrichten {
  id        String @id(map: "nachrichten_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatid    String @db.Uuid
  nachricht String @db.VarChar
  userid    String @db.Uuid
  user     users  @relation(fields: [userid], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "nachrichten_fk")
  chat     chats  @relation(fields: [chatid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "nachrichten_fk_1")
}

model objekte {
  id             Int          @unique(map: "objekte_un") @default(autoincrement())
  objekt         String       @db.VarChar(20)
  beschreibung   String       @db.VarChar(150)
  auftraggeberID Int
  strasse         String       @map("straße") @db.VarChar(50)
  hausnummer     Int
  plz            Int
  ort            String       @db.VarChar(25)
  auftraggeber   auftraggeber @relation(fields: [auftraggeberID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "objekte_fk")
  pruefungen     pruefungen[]
  wohnungen      wohnungen[]
}

model pruefungen {
  id              Int               @unique(map: "pruefungen_un") @default(autoincrement())
  objektID        Int?
  userID          String            @db.Uuid
  timestamp       String            @db.VarChar(20)
  objekt         objekte?          @relation(fields: [objektID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pruefungen_fk")
  user           users             @relation(fields: [userID], references: [user_id], onDelete: NoAction, onUpdate: NoAction, map: "pruefungen_fk1")
  pruefungenListe pruefungenListe[]
}

model pruefungenListe {
  id                     Int                 @default(autoincrement())
  rauchmelderID          Int
  selberRaum             Boolean
  baulichUnveraendert    Boolean
  hindernisseUmgebung    Boolean
  relevanteBeschaedigung Boolean
  oeffnungenFrei         Boolean
  warnmelderGereinigt    Boolean
  pruefungErfolgreich    Boolean
  batterieGut            Boolean
  timestamp              String              @db.VarChar(50)
  pruefungsID            Int
  grund                  Int
  anmerkungen            String              @db.VarChar(100)
  anmerkungenZwei        String              @db.VarChar(100)
  pruefungen             pruefungen          @relation(fields: [pruefungsID], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "pruefungenliste_fk")
  rauchmelderhistorie    rauchmelderhistorie @relation(fields: [rauchmelderID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pruefungenliste_fk1")

  @@unique([anmerkungenZwei, id], map: "pruefungenliste_un")
}

model rauchmelder {
  id                                                                       Int                   @unique(map: "rauchmelder_un") @default(autoincrement())
  aktuelleHistorienID                                                      Int?
  wohnungsID                                                               Int
  aktuellerRauchmelder rauchmelderhistorie?  @relation("rauchmelder_aktuelleHistorienIDTorauchmelderhistorie", fields: [aktuelleHistorienID], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rauchmelder_fk")
  wohnungen                                                                wohnungen             @relation(fields: [wohnungsID], references: [id], onDelete: Cascade, map: "rauchmelder_fk_1")
  rauchmelderhistorie       rauchmelderhistorie[] @relation("rauchmelderhistorie_rauchmelderbzTorauchmelder")
}

model rauchmelderhistorie {
  id                                                               Int               @id(map: "rauchmelderhistorie_pk") @default(autoincrement())
  rauchmelderbz                                                    Int
  raum                                                             String            @db.VarChar(150)
  seriennr                                                         String            @db.VarChar(10)
  produktionsdatum                                                 DateTime          @db.Date
  installedAt                                                      DateTime?         @db.Date
  outOfOrderAt                                                     DateTime?         @db.Date
  isactive                                                         Boolean?          @default(false)
  pruefungenListe                                                  pruefungenListe[]
  rauchmelderAnzeigen rauchmelder[]     @relation("rauchmelder_aktuelleHistorienIDTorauchmelderhistorie")
  rauchmelder       rauchmelder       @relation("rauchmelderhistorie_rauchmelderbzTorauchmelder", fields: [rauchmelderbz], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rauchmelderhistorie_fk")
}

model user_role {
  id    String  @id(map: "user_role_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  admin Boolean @default(false)
}

model users {
  username       String           @db.VarChar(50)
  password       String           @db.VarChar(256)
  admin          Boolean          @default(false)
  salt           String?          @db.VarChar
  email          String?          @db.VarChar
  user_id        String           @id(map: "users_pk") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  chatteilnehmer chatteilnehmer[]
  nachrichten    nachrichten[]
  pruefungen     pruefungen[]
}

model wohnungen {
  id           Int           @unique(map: "wohnungen_un") @default(autoincrement())
  objektID     Int
  etage        String        @db.VarChar(20)
  wohnungslage String        @db.VarChar(20)
  haus         String        @db.VarChar(20)
  vorname      String        @db.VarChar(50)
  nachname     String        @db.VarChar(50)
  rauchmelder  rauchmelder[]
  objekte      objekte       @relation(fields: [objektID], references: [id], onDelete: Cascade, map: "wohnungen_fk")
}
